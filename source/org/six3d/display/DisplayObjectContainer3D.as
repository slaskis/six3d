package org.six3d.display {	import flash.display.Sprite;	import flash.events.EventDispatcher;		import de.polygonal.ds.HashMap;	import de.polygonal.ds.Iterator;		/**	 * @author Robert Sk√∂ld, bob@six3d.org	 */	public class DisplayObjectContainer3D extends EventDispatcher {		protected var _children : HashMap;		protected var _sprite : Sprite;		private var _scene : Scene3D;		public function DisplayObjectContainer3D() {			_children = new HashMap();			_sprite = new Sprite();		}				public function get sprite() : Sprite {			return _sprite;		}						public function set scene( scene : Scene3D ) : void {			_scene = scene;			var iterator : Iterator = children.getIterator();			while( iterator.hasNext() ) {				var child : DisplayObject3D = iterator.next() as DisplayObject3D;				child.scene = _scene;			}		}				public function get scene() : Scene3D {			return _scene;		}				public function addChild( child : DisplayObject3D ) : DisplayObject3D {			child.parent = this;			child.scene = scene;			child.initialize();			sprite.addChild( child.sprite );			_children.insert( child.name , child );//			trace( "added " + child.name + ", children: " + _children.size );			return child;		}						public function getChildAt( depth : uint ) : DisplayObject3D {			var itr : Iterator = children.getIterator();			while( itr.hasNext() ) {				if( DisplayObject3D( itr.data ).depth == depth ) {					return itr.data as DisplayObject3D;				}				itr.next();			}			return null;		}				public function getChildByName( name : String ) : DisplayObject3D {			return children.find( name ) as DisplayObject3D;		}				public function contains( name : String ) : Boolean {			return children.containsKey( name );		}		public function removeChild( child : DisplayObject3D ) : void {			sprite.removeChild( child.sprite );			children.remove( child.name );		}				public function removeChildByName( name : String ) : void {			removeChild( getChildByName( name ) );		}				public function get children() : HashMap {			return _children;		}		public function askRendering( renderScene : Boolean = false ) : void {			var itr : Iterator = children.getIterator();			while( itr.hasNext() ) {				var child : DisplayObject3D = itr.next() as DisplayObject3D;				child.askRendering( renderScene );			}		}				public function render() : void {			var itr : Iterator = children.getIterator();			while( itr.hasNext() ) {				var child : DisplayObject3D = itr.next() as DisplayObject3D;				child.render();			}		}			}}