package org.six3d.display {	import flash.display.BitmapData;	import flash.geom.Matrix;		/**	 * @author Robert Sk√∂ld, bob@six3d.org	 */	public class Sprite3D extends InteractiveObject3D {		private var _bitmap : BitmapData;				public function Sprite3D( name : String = null ) {			super( name );		}				public function set bitmap( data : BitmapData ) : void {			_bitmap = data;		}				public function beginFill( color : uint , alpha : Number = 1 ) : void {			if( _bitmap != null ) {				// TODO Remove this hack				beginBitmapFill( _bitmap );				trace( "bitmapping" );				return;			}			_motif.push([ "B" , [ color , alpha ] ]);			askRendering( true );		}				public function beginBitmapFill( bitmap : BitmapData , matrix : Matrix = null , repeat : Boolean = true , smooth : Boolean = false ) : void {			_motif.push([ "B" , [ bitmap , matrix , repeat , smooth ] ]);			askRendering( true );		}		public function lineStyle( thickness : Number , color : uint = 0 , alpha : Number = 1 ) : void {			_motif.push([ "S" , [ thickness , color , alpha ] ]);			askRendering( true );		}		public function moveTo( x : int , y : int ) : void {			_motif.push([ "M" , [ x , y ] ]);			askRendering( true );		}		public function lineTo( x : int , y : int ) : void {			_motif.push([ "L" , [ x , y ] ]);			askRendering( true );		}		public function curveTo( controlX : int , controlY : int , anchorX : int , anchorY : int ) : void {			_motif.push([ "C" , [ controlX , controlY , anchorX , anchorY ] ]);			askRendering( true );		}				public function endFill() : void {			_motif.push([ 'E' ]);			askRendering( true );		}		public function clear() : void {			_motif = new Array();			askRendering( true );		}				public function addMotif(motif : Array) : void {			_motif = _motif.concat(motif);			askRendering( true );		}				public override function toString() : String {			return "[Sprite3D " + name + "]";		}	}}