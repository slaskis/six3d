package org.six3d.display {	import flash.display.Sprite;	import flash.geom.Matrix;	import org.six3d.geom.Matrix3D;	import org.six3d.geom.Point3D;			/**	 * @author Robert Sk√∂ld, bob@six3d.org	 */	public class Motif {		static public function clone(motif : Array) : Array {			var motif2 : Array = new Array();			var l : int = motif.length;			for (var i : Number = 0;i < l; i++) {				switch (motif[i][0]) {					case "B":						if( motif[i][1].length > 2 ) { 							// Bitmap fill							motif2.push([ 'B', [ motif[i][1][0] , motif[i][1][1] , motif[i][1][2] , motif[i][1][3] ] ]);						} else { 							// Regular fill							motif2.push([ 'B', [ motif[i][1][0] , motif[i][1][1] ] ]);						}						break;					case "S":						motif2.push([ 'S', [ motif[i][1][0], motif[i][1][1], motif[i][1][2] ] ]);						break;					case "M":						motif2.push([ 'M', [ motif[i][1][0], motif[i][1][1] ] ]);						break;					case "L":						motif2.push([ 'L', [ motif[i][1][0], motif[i][1][1] ] ]);						break;					case "C":						motif2.push([ 'C', [ motif[i][1][0], motif[i][1][1], motif[i][1][2], motif[i][1][3] ] ]);						break;					case "E":						motif2.push([ 'E' ]);						break;				}			}			return motif2;		}		static public function project(motif : Array, matrix : Matrix3D, viewdistance : Number) : void {			var l : int = motif.length;			for (var i : Number = 0;i < l; i++) {				switch (motif[i][0]) {					case "B":						if( motif[i][1].length > 2 ) { 							// Bitmapfill							var end : Matrix = new Matrix();							// Scale							var s : Matrix = new Matrix();							s.a = matrix.a;							s.d = matrix.e;							end.concat(s);							// Rotate							var r : Matrix = new Matrix();							r.b = matrix.b;							r.c = matrix.d;							end.concat(r);							// Translate							var t : Matrix = new Matrix();							t.tx = matrix.tx;							t.ty = matrix.ty;							end.concat(t);							end.invert();														motif[i][1][1] = end;						}						break;					case "M":					case "L":						var pt : Point3D = matrix.transformPoint(new Point3D(motif[i][1][0], motif[i][1][1], 0));						pt.project(pt.getPerspective(viewdistance));						motif[i][1][0] = pt.x;						motif[i][1][1] = pt.y;						break;					case "C":						var pt1 : Point3D = matrix.transformPoint(new Point3D(motif[i][1][0], motif[i][1][1], 0));						var pt2 : Point3D = matrix.transformPoint(new Point3D(motif[i][1][2], motif[i][1][3], 0));						pt1.project(pt1.getPerspective(viewdistance));						pt2.project(pt2.getPerspective(viewdistance));						motif[i][1][0] = pt1.x;						motif[i][1][1] = pt1.y;						motif[i][1][2] = pt2.x;						motif[i][1][3] = pt2.y;						break;				}			}		}		/* 		 * Example Comma-sign from arial.svg:		 * M182 0V205H387V0Q387 -113 347 -182T220 -290L170 -213Q227 -188 254 -140T284 0H182Z		 * Parsed:		 * Actionscript code:			SVG Path:		 * moveTo(182,0); 				M182 0		 * lineTo(182,205); 			V205		 * lineTo(387,205); 			H387		 * lineTo(387,205); 			V0		 * curveTo(387,-113,347,-182); 	Q387 -113 347 -182		 * curveTo(?,?,220,-290); 		T220 -290		 * lineTo(170,-213); 			L170 -213		 * curveTo(227,-118,254,-140);	Q227 -188 254 -140		 * curveTo(?,?,284,0);			T284 0		 * lineTo(182,0);				H182		 * endFill();					Z		 */		public static function draw(clip : Sprite, motif : Array) : void {			var l : int = motif.length;			for (var i : Number = 0;i < l; i++) {				switch (motif[i][0]) {					case "B":						if( motif[i][1].length > 2 ) { 							// Bitmap fill							clip.graphics.beginBitmapFill(motif[i][1][0], motif[i][1][1], motif[i][1][2], motif[i][1][3]);						} else { 							// Regular fill							clip.graphics.beginFill(motif[i][1][0], motif[i][1][1]);						}						break;					case "S":						clip.graphics.lineStyle(motif[i][1][0], motif[i][1][1], motif[i][1][2]);						break;					case "M":						clip.graphics.moveTo(motif[i][1][0], motif[i][1][1]);						break;					case "L":						clip.graphics.lineTo(motif[i][1][0], motif[i][1][1]);						break;					case "C":						clip.graphics.curveTo(motif[i][1][0], motif[i][1][1], motif[i][1][2], motif[i][1][3]);						break;					case "E":						clip.graphics.endFill();						break;				}			}		}	}}