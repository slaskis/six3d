package org.six3d.display {	import flash.utils.Dictionary;		import flash.display.Sprite;	import flash.events.Event;			/**	 * @author Robert SkÃ¶ld, bob@six3d.org	 */	public class Scene3D extends DisplayObjectContainer3D {		private var _viewdistance : Number = 1000;		private var _renderQueue : Dictionary = new Dictionary( true );		private var _renderNum : Number = 0;		public function Scene3D( container : Sprite ) {			_sprite = container;			sprite.addEventListener( Event.ENTER_FRAME, onRender );		}				public override function addChild( do3d : DisplayObject3D ) : DisplayObject3D {			scene = this;			return super.addChild( do3d );		}				public function addToQueue( do3d : DisplayObject3D ) : void {			if( _renderQueue[ do3d.name ] != null ) {//				trace( "Scene3D::addToQueue:ERROR: Duplicate DO3D " + do3d.name );				return;			}			_renderQueue[ do3d.name ] = do3d;			_renderNum++;		}		private function onRender( event : Event ) : void {			if( willRender ) {				dispatchEvent( new Event( "render" ) );								// Running super.render() gives more correct rendering but calls render() on all objects recursively				super.render();				_renderNum = 0;				return;								// Running obj.render() on each object "should" mean better performance since it only updates the objects that has made the askRendering call				// But renders incorrectly				for each( var obj : DisplayObject3D in _renderQueue ) {					obj.render();				}				_renderQueue = new Dictionary( true );				_renderNum = 0;			}		}		public function get willRender() : Boolean {			return _renderNum > 0;		}				public function get viewdistance() : Number {			return _viewdistance;		}		public function set viewdistance(value : Number) : void {			_viewdistance = value;			super.askRendering();		}				public function get count() : int {			return _renderNum;		}	}}