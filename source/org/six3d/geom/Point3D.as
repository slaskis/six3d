package org.six3d.geom {	/**	 * @author Robert Sk√∂ld, bob@six3d.org	 */	public class Point3D {		public var x : Number;		public var y : Number;		public var z : Number;		function Point3D(x : Number, y : Number, z : Number) {			this.x = x;			this.y = y;			this.z = z;		}		public function getPerspective(viewdistance : Number) : Number {			return viewdistance / (z + viewdistance);		}		public function project(perspective : Number) : void {			x *= perspective;			y *= perspective;			z = 0;		}		public function clone() : Point3D {			return new Point3D( x, y, z );		}		public function get modulo() : Number {			return Math.sqrt( x * x + y * y + z * z );		}		public static function add( v : Point3D, w : Point3D ) : Point3D {			return new Point3D(v.x + w.x, v.y + w.y, v.z + w.z);		}		public static function sub( v : Point3D, w : Point3D ) : Point3D {			return new Point3D(v.x - w.x, v.y - w.y, v.z - w.z);		}		public static function dot( v : Point3D, w : Point3D ) : Number {			return ( v.x * w.x + v.y * w.y + w.z * v.z );		}		public static function cross( v : Point3D, w : Point3D ) : Point3D {			return new Point3D((w.y * v.z) - (w.z * v.y), (w.z * v.x) - (w.x * v.z), (w.x * v.y) - (w.y * v.x));		}		public function normalize() : void {			var mod : Number = modulo;			if( mod != 0 && mod != 1) {				x /= mod;				y /= mod;				z /= mod;			}		}				public function toString() : String {			return "[Point3D x: " + x + ", y: " + y + ", z: " + z + "]";		}	}}