package org.six3d.utils {	import org.six3d.display.Sprite3D;			/**	 * @author Robert Sk√∂ld, bob@six3d.org, heavily based on Mathieu Badimons Drawing class in FIVe3D.	 */	public class Drawing {		static public function polygon(sprite : Sprite3D, points : Array, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			tracePolygon(sprite, points);			sprite.endFill();		}		static private function tracePolygon(sprite : Sprite3D, points : Array) : void {			sprite.moveTo(points[0].x, points[0].y);			var i : int = points.length;			while (i--) sprite.lineTo(points[i].x, points[i].y);		}		public static function gradientVerticalPlainPlace(sprite : Sprite3D, x : Number, y : Number, width : Number, height : Number, color : Number, alpha1 : Number, alpha2 : Number, nbsteps : Number) : void {			var heightstep : Number = height / nbsteps;			var alphastep : Number = (alpha2 - alpha1) / nbsteps;			for (var i : Number = 0;i < nbsteps; i++) {				rectanglePlace(sprite, x, y + i * heightstep, width, heightstep, color, alpha1 + i * alphastep);			}		}		public static function rectangle(sprite : Sprite3D, width : Number, height : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceRectangle(sprite, 0, 0, width, height);			sprite.endFill();		}		public static function rectanglePlace(sprite : Sprite3D, x : Number, y : Number, width : Number, height : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceRectangle(sprite, x, y, x + width, y + height);			sprite.endFill();		}		private static function traceRectangle(sprite : Sprite3D, x1 : Number, y1 : Number, x2 : Number, y2 : Number) : void {			sprite.moveTo(x1, y1);			sprite.lineTo(x2, y1);			sprite.lineTo(x2, y2);			sprite.lineTo(x1, y2);			sprite.lineTo(x1, y1);		}		public static function disk(sprite : Sprite3D, radius : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceDisk(sprite, 0, 0, radius);			sprite.endFill();		}		public static function diskPlace(sprite : Sprite3D, x : Number, y : Number, radius : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceDisk(sprite, x, y, radius);			sprite.endFill();		}		private static function traceDisk(sprite : Sprite3D, x : Number, y : Number, radius : Number) : void {			var A : Number = (Math.SQRT2 - 1) * radius;			var B : Number = radius / Math.SQRT2;			sprite.moveTo(x, y - radius);			sprite.curveTo(x + A, y - radius, x + B, y - B);			sprite.curveTo(x + radius, y - A, x + radius, y);			sprite.curveTo(x + radius, y + A, x + B, y + B);			sprite.curveTo(x + A, y + radius, x, y + radius);			sprite.curveTo(x - A, y + radius, x - B, y + B);			sprite.curveTo(x - radius, y + A, x - radius, y);			sprite.curveTo(x - radius, y - A, x - B, y - B);			sprite.curveTo(x - A, y - radius, x, y - radius);		}		public static function rounded(sprite : Sprite3D, width : Number, height : Number, radius : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceRounded(sprite, 0, 0, width, height, radius);			sprite.endFill();		}		public static function roundedPlace(sprite : Sprite3D, x : Number, y : Number, width : Number, height : Number, radius : Number, color : Number, alpha : Number ) : void {			sprite.beginFill(color, alpha);			traceRounded(sprite, x, y, x + width, y + height, radius);			sprite.endFill();		}		private static function traceRounded(sprite : Sprite3D, x1 : Number, y1 : Number, x2 : Number, y2 : Number, radius : Number) : void {			var A : Number = (Math.SQRT2 - 1) * radius;			var B : Number = radius / Math.SQRT2;			sprite.moveTo(x1 + radius, y1);			sprite.lineTo(x2 - radius, y1);			sprite.curveTo(x2 - radius + A, y1, x2 - radius + B, y1 + radius - B);			sprite.curveTo(x2, y1 + radius - A, x2, y1 + radius);			sprite.lineTo(x2, y2 - radius);			sprite.curveTo(x2, y2 - radius + A, x2 - radius + B, y2 - radius + B);			sprite.curveTo(x2 - radius + A, y2, x2 - radius, y2);			sprite.lineTo(x1 + radius, y2);			sprite.curveTo(x1 + radius - A, y2, x1 + radius - B, y2 - radius + B);			sprite.curveTo(x1, y2 - radius + A, x1, y2 - radius);			sprite.lineTo(x1, y1 + radius);			sprite.curveTo(x1, y1 + radius - A, x1 + radius - B, y1 + radius - B);			sprite.curveTo(x1 + radius - A, y1, x1 + radius, y1);		}		public static function star(sprite : Sprite3D, nbtops : Number, radius1 : Number, radius2 : Number, angle : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceStar(sprite, 0, 0, nbtops, radius1, radius2, angle);			sprite.endFill();		}		public static function starPlace(sprite : Sprite3D, x : Number, y : Number, nbtops : Number, radius1 : Number, radius2 : Number, angle : Number, color : Number, alpha : Number) : void {			sprite.beginFill(color, alpha);			traceStar(sprite, x, y, nbtops, radius1, radius2, angle);			sprite.endFill();		}		private static function traceStar(sprite : Sprite3D, x : Number, y : Number, nbtops : Number, radius1 : Number, radius2 : Number, angle : Number) : void {			nbtops *= 2;			var anglestep : Number = Math.PI * 2 / nbtops;			sprite.moveTo(x + Math.cos(angle) * radius2, y + Math.sin(angle) * radius2);			while (nbtops--) {				angle += anglestep;				if (nbtops % 2) sprite.lineTo(x + Math.cos(angle) * radius1, y + Math.sin(angle) * radius1);				else sprite.lineTo(x + Math.cos(angle) * radius2, y + Math.sin(angle) * radius2);			}		}		public static function gradientHorizontalPlain(sprite : Sprite3D, width : Number, height : Number, color : Number, alpha1 : Number, alpha2 : Number, nbsteps : Number) : void {			var widthstep : Number = width / nbsteps;			var alphastep : Number = (alpha2 - alpha1) / nbsteps;			for (var i : Number = 0;i < nbsteps; i++) {				rectanglePlace(sprite, i * widthstep, 0, widthstep, height, color, alpha1 + i * alphastep);			}		}		public static function gradientHorizontalPlainPlace(sprite : Sprite3D, x : Number, y : Number, width : Number, height : Number, color : Number, alpha1 : Number, alpha2 : Number, nbsteps : Number) : void {			var widthstep : Number = width / nbsteps;			var alphastep : Number = (alpha2 - alpha1) / nbsteps;			for (var i : Number = 0;i < nbsteps; i++) {				rectanglePlace(sprite, x + i * widthstep, y, widthstep, height, color, alpha1 + i * alphastep);			}		}	}}