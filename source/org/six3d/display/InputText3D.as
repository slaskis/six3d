package org.six3d.display {	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.ui.Keyboard;	import flash.utils.Timer;		import org.six3d.display.Text3D;	import org.six3d.primitives.Rectangle3D;		/**	 * @author Robert SkÃ¶ld, bob@six3d.org	 */	public class InputText3D extends Text3D {		private var _restrict : String = "";		private var _index : int = 0;		private var _marker : Sprite3D;		private var _timer : Timer;		public function InputText3D( name : String = null ) {			super(name);		}				public function set selected( bool : Boolean ) : void {			if( !sprite ) {				trace( "Could not find sprite" );				return;			}			if( bool ) {				_index = text.length;				sprite.stage.addEventListener( KeyboardEvent.KEY_DOWN , onKeyDown );				startMarker();			} else {				sprite.stage.removeEventListener( KeyboardEvent.KEY_DOWN , onKeyDown );				stopMarker();			}		}				private function startMarker() : void {			if( !_marker ) {				_marker = new Rectangle3D( 2 , -30 );				addChild( _marker );				_timer = new Timer( 500 );				_timer.addEventListener(TimerEvent.TIMER , onMarkerBlink );			}			_timer.start();		}				private function stopMarker() : void {			_timer.stop();			_marker.visible = false;		}				private function onMarkerBlink(event : TimerEvent) : void {			_marker.visible = !_marker.visible;		}						private function updateMarker() : void {			var rect : Rectangle = getCharBoundaries( _index );			_marker.x = rect.x + rect.width;			_marker.y = rect.y;		}		private function onKeyDown( event : KeyboardEvent ) : void {			if( !isTypeReady() ) return; 			var arr : Array = text.split("");			switch( event.keyCode ) {				case Keyboard.BACKSPACE:					if( _index > 0 ) _index--;					arr.splice( _index , 1 );					text = arr.join("");					break;				case Keyboard.DELETE:					trace( "deleted: " + arr.splice( _index , 1 ) );					text = arr.join("");					break;				case Keyboard.LEFT:					if( _index > 0 ) _index--;					break;				case Keyboard.RIGHT:					if( _index < text.length ) _index++;					break;				case Keyboard.CONTROL:				case Keyboard.SHIFT:				case Keyboard.CAPS_LOCK:					trace( "Not supported key: (" + event.charCode + ") " + String.fromCharCode( event.charCode ) );					break;				default:					var char : String = String.fromCharCode( event.charCode );					if( multiline && event.keyCode == Keyboard.ENTER ) char = "\n";					if( isRestricted( char ) ) return;					arr.splice( _index , 0 , char );					text = arr.join("");					_index++;					dispatchEvent( new Event( Event.CHANGE ) );					break;			}			updateMarker();		}				private function isRestricted( char : String ) : Boolean {			if( restrict.length > 0 ) {				var pattern : RegExp = new RegExp( "["+restrict+"]" , "" );				if( !pattern.test( char ) ) {					trace( "Restricted character: " + char );					return true;				}			}			return false;		}		public function set restrict( value : String ) : void {			_restrict = value;		}		public function get restrict() : String {			return _restrict;		}	}}